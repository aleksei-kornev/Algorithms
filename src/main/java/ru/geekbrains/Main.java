package ru.geekbrains;

public class Main {
    /* Задание 1.1
    Приведите пример алгоритмов и структур данных из жизни.

    Ответ: Алгоритм - поиск автомобиля на парковке в ТЦ. В зависимости от того, имеет ли парковка размеченные
    адреса парковочных мест, алгоритм может быть разным.
    Вариант 1 - нет никакой разметки. Тогда поиск автомобиля происходит простым перебором. Сложность О(n)
    Вариант 2 - пронумерованы парковочные места. Тогда идем в центр, смотрим какой там номер,
    понимаем, он больше или меньше нашего, в зависимости от этого идем в центр нужной половины и повторям действия.
    Сложность О(logn)

    Структуры данных - те же номера парковки. Это либо линейная структура, либо табличная.
    */

    /*
    Задание 1.2
    Приведите пример алгоритмов и структур данных в программировании.

    Ответ: Алгоритм поиска кротчайшего маршрута в лабиринте, где поле - это матрица, а ячейки могут быть пустыми (0)
    или препятствиями (-1).

    Структуры данных: двумерная матрица, лист и пр.
    */

    /*
    Задание 1.3
    Напишите программный код, в котором все данные хранятся только в переменных трех типов данных: Ссылочные,
    примитивные и своего класса содержащего: конструктор и метод отображения данных.
    Выведите написанные данные.
    */

    public static void main(String[] args) {
        String linkedType = "Ссылочный тип";
        int simpleType = 0;
        MyClass myClass = new MyClass("Bob");

        System.out.println("Ссылочный тип " + linkedType);
        System.out.println("Примитив " + simpleType);
        System.out.println(myClass.toString());

        /*
        Задание 1.4
        Дополните предыдущий код сравнением ваших данных с другой переменной, данный код должен имитировать простейший поиск перебором.
        Оцените время выполнения алгоритма с помощью базового метода System.nanoTime().
        */
        long timeStart = System.nanoTime();
        System.out.println(linkedType.equals(new String("Ссылочный тип")));
        System.out.println("Затраты времени: "+(System.nanoTime() - timeStart) + " наносекунд.");
    }

    static class MyClass {
        private String name;

        public MyClass(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return "myClass name is " + name + '.';
        }

    }
}


